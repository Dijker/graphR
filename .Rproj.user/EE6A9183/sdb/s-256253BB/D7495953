{
    "collab_server" : "",
    "contents" : "# both applications\nreadData <- function (file=choose.files()){\n  data <- read.xlsx(file, sheetIndex=1, startRow=1, as.data.frame=TRUE, header=TRUE, keepFormulas=FALSE)\n  return(data)\n}\n\n\ndesignPlot <- function(plotVar){\n  plotVar <- plotVar + theme(title = element_text(face=\"bold\", size=24),\n                             axis.title.x = element_text(face=\"bold\", size=22, margin=margin(20,0,0,0)),\n                             axis.text.x  = element_text(vjust=0.5, size=18),\n                             axis.title.y = element_text(face=\"bold\", size=22, margin=margin(20,15,0,0)),\n                             axis.text.y  = element_text(vjust=0.5, size=18))\n  return(plotVar)\n}\n\n# exclusiv rv\n# get dataframe stats\nget_stats <- function(df){\n  profile <- df %>%\n    mutate(Description = ifelse(CPU >= 6, \"Large\",\n                                ifelse(CPU < 6 & CPU > 2, \"Medium\", \n                                       ifelse(CPU <= 2, \"Small\", NA)))) %>%\n    mutate(VM_on = ifelse(Powerstate ==\"poweredOn\", 1, 0)) %>%\n    group_by(Description) %>%\n    summarise(VM_Count = n(), n_VMs_on = sum(VM_on), n_VMs_off = n()-sum(VM_on), Concurrent_Ratio = round(n_VMs_on*100/(VM_Count), 1),\n              CPU_Count = sum(CPU), Memory_Count = round(sum(Memory)/1000, 1), Storage_Occupied = round(sum(In_Use_MB)/1000, 1),\n              Storage_Provisioned = round(sum(Provisioned_MB)/1000, 1), thin_thick_ratio = round(Storage_Occupied/Storage_Provisioned*100 ,1),\n              CPU_Count_per_VM = round(CPU_Count/VM_Count, 1), Memory_Count_per_VM = round(Memory_Count/VM_Count, 1),\n              Storage_Occupied_per_VM = round(Storage_Occupied/VM_Count, 1), Storage_Provisioned_per_VM = round(Storage_Provisioned/VM_Count, 1))\n  \n  total <- profile %>%\n    mutate(Description = \"Total\") %>%\n    group_by(Description) %>%\n    summarise(VM_Count = sum(VM_Count), n_VMs_on = sum(n_VMs_on), n_VMs_off = sum(n_VMs_off), Concurrent_Ratio = round(n_VMs_on*100/VM_Count, 1),\n              CPU_Count = sum(CPU_Count), Memory_Count = round(sum(Memory_Count), 1), Storage_Occupied = round(sum(Storage_Occupied), 1),\n              Storage_Provisioned = round(sum(Storage_Provisioned), 1), thin_thick_ratio = round(Storage_Occupied/Storage_Provisioned*100 ,1),\n              CPU_Count_per_VM = round(sum(CPU_Count)/VM_Count, 1), Memory_Count_per_VM = round(Memory_Count/VM_Count, 1),\n              Storage_Occupied_per_VM = round(Storage_Occupied/VM_Count, 1), Storage_Provisioned_per_VM = round(Storage_Provisioned/VM_Count, 1))\n  \n  total <- rbind(profile, total)\n  return(total)\n}\n\ngenerate_plots <- function(df, raw_df, praefix = \"comp\"){\n  # Plot VM count\n  plot_list <- list()\n  plot_list[[length(plot_list)+1]] <- designPlot(ggplot(df, aes(x=Description, y=VM_Count))  + geom_bar(stat=\"identity\", width=.7, fill=\"steelblue\") + xlab(\"VM Profile\") + ylab(\"Number of VM's\") + geom_text(aes(label=VM_Count), vjust=1.6, color=\"white\", size=5.5, fontface=\"bold\") + guides(fill=FALSE))\n  \n  # Plot Power Status\n  tmp <- df[, c(\"Description\", \"VM_Count\", \"n_VMs_on\", \"n_VMs_off\")]\n  tmp <- melt(tmp ,  id='Description', value.name='Count', variable.name = 'Type')\n  plot_list[[length(plot_list)+1]] <- designPlot(ggplot(tmp, aes(x=Description, y=Count, fill=Type)) + geom_bar(stat=\"identity\", width=.7, position = \"dodge\") + xlab(\"VM Profile\") + ylab(\"Number of VM's\") + scale_fill_brewer(palette = \"Set2\", name =\"\", labels=c(\"Number of VM's\", \"VM's powered on\", \"VM's powered off\")))\n  \n  # Plot CPU Density\n  if(praefix != \"comp\"){\n    df <- raw_df %>%\n      filter(Datacenter == praefix)\n  }else{\n    df <- raw_df\n  }\n  plot_list[[length(plot_list)+1]] <- designPlot(ggplot(df, aes(x=CPU)) + geom_density(alpha =.5, fill=\"steelblue\", aes(y= ..scaled..)) + xlab(\"vCPU Count\") + ylab(\"Density [ - ]\") + xlim(c(-0.5,20)))\n  \n  # Plot Memory Density\n  plot_list[[length(plot_list)+1]] <- designPlot(ggplot(df, aes(x=Memory/1000)) + geom_density(alpha =.5, fill=\"steelblue\", aes(y= ..scaled..)) + xlab(\"Memory [GB]\") + ylab(\"Density [ - ]\") + xlim(c(-0.5,60)))\n  \n  # Plot Storage Density\n  tmp <- df[,c(\"Provisioned_MB\", \"In_Use_MB\")]\n  tmp <- melt(tmp, value.name='Count', variable.name = 'Type') \n  plot_list[[length(plot_list)+1]] <- designPlot(ggplot(tmp, aes(x=Count/1000, fill=Type)) + geom_density(alpha =.5, aes(y= ..scaled..)) + xlab(\"Storage [GB]\") + ylab(\"Density [ - ]\") + xlim(c(-0.5,2000))  + scale_fill_discrete(name =\"\", labels=c(\"Provisioned Storage [GB]\", \"Occupied Storage [GB]\")))\n  \n  return(plot_list)\n}\n\ngenerate_slides <- function(df, plot_list, praefix = \"comp\"){\n  if(praefix == \"comp\"){\n    # table all values\n    tmp <- as.data.frame(df[, c(\"Description\", \"VM_Count\", \"n_VMs_on\", \"n_VMs_off\", \"Concurrent_Ratio\", \"CPU_Count\", \"Memory_Count\", \"Storage_Occupied\", \"Storage_Provisioned\", \"thin_thick_ratio\")])\n    colnames(tmp) <- c(\"Description\", \"# VM's\", \"# VM's on\", \"# VM's off\", \"Concurrent Ratio [%]\", \"# vCPU's\", \"Memory [GB]\", \"Occupied Storage [GB]\", \"Provisioned Storage [GB]\", \"Thin / Thick Ratio [%]\")\n    slideTable(tmp, \"Summary of collected components\", pathImg = \"./backgrounds/main_slide_external.PNG\")\n    \n    # table: summary per VM\n    tmp <- as.data.frame(df[, c(\"Description\",\"VM_Count\", \"Concurrent_Ratio\", \"CPU_Count_per_VM\", \"Memory_Count_per_VM\", \"Storage_Occupied_per_VM\", \"Storage_Provisioned_per_VM\")])\n    colnames(tmp) <- c(\"Description\", \"# VM's\", \"Concurrent Ratio [%]\", \"# vCPU's\", \"Memory [GB]\", \"Occupied Storage [GB]\", \"Provisioned Storage [GB]\")\n    slideTable(tmp, \"Average values of collected components\", pathImg = \"./backgrounds/main_slide_external.PNG\")\n    \n    # Plots\n    slidePlot(plot_list[[1]], \"Number of VM's for each profile\", pathImg = \"./backgrounds/main_slide_external.PNG\")\n    \n    slidePlot(plot_list[[2]], \"Overview of powered on / off VM's for each profile\", pathImg = \"./backgrounds/main_slide_external.PNG\")\n    \n    slidePlot(plot_list[[3]], \"Distribution of vCPU for all VM's\", pathImg = \"./backgrounds/main_slide_external.PNG\")\n    \n    slidePlot(plot_list[[4]], \"Distribution of Memory for all VM's\", pathImg = \"./backgrounds/main_slide_external.PNG\")\n    \n    slidePlot(plot_list[[5]], \"Distribution of occupied and provisioned storage for all VM's\", pathImg = \"./backgrounds/main_slide_external.PNG\")\n    \n  }else{\n    slideChapter(paste(\"Summary for Datacenter: \", praefix, \"\"))\n    \n    # table all values\n    tmp <- as.data.frame(df[, c(\"Description\", \"VM_Count\", \"n_VMs_on\", \"n_VMs_off\", \"Concurrent_Ratio\", \"CPU_Count\", \"Memory_Count\", \"Storage_Occupied\", \"Storage_Provisioned\", \"thin_thick_ratio\")])\n    colnames(tmp) <- c(\"Description\", \"# VM's\", \"# VM's on\", \"# VM's off\", \"Concurrent Ratio [%]\", \"# vCPU's\", \"Memory [GB]\", \"Occupied Storage [GB]\", \"Provisioned Storage [GB]\", \"Thin / Thick Ratio [%]\")\n    slideTable(tmp, paste(\"Summary of collected components for: \", praefix, \"\"), pathImg = \"./backgrounds/main_slide_external.PNG\")\n    \n    # table: summary per VM\n    tmp <- as.data.frame(df[, c(\"Description\",\"VM_Count\", \"Concurrent_Ratio\", \"CPU_Count_per_VM\", \"Memory_Count_per_VM\", \"Storage_Occupied_per_VM\", \"Storage_Provisioned_per_VM\")])\n    colnames(tmp) <- c(\"Description\", \"# VM's\", \"Concurrent Ratio [%]\", \"# vCPU's\", \"Memory [GB]\", \"Occupied Storage [GB]\", \"Provisioned Storage [GB]\")\n    slideTable(tmp, paste(\"Average values of collected components for: \", praefix, \"\"), pathImg = \"./backgrounds/main_slide_external.PNG\")\n    \n    slidePlot(plot_list[[1]], paste(\"Number of VM's for each profile - \", praefix, \"\"), pathImg = \"./backgrounds/main_slide_external.PNG\")\n    \n    slidePlot(plot_list[[2]], paste(\"Overview of powered on / off VM's for each profile - \", praefix, \"\"), pathImg = \"./backgrounds/main_slide_external.PNG\")\n    \n    slidePlot(plot_list[[3]], paste(\"Distribution of vCPU for all VM's - \", praefix, \"\"), pathImg = \"./backgrounds/main_slide_external.PNG\")\n    \n    slidePlot(plot_list[[4]], paste(\"Distribution of Memory for all VM's - \", praefix, \"\"), pathImg = \"./backgrounds/main_slide_external.PNG\")\n    \n    slidePlot(plot_list[[5]], paste(\"Distribution of occupied and provisioned storage for all VM's - \", praefix, \"\"), pathImg = \"./backgrounds/main_slide_external.PNG\")\n  }  \n}\n# function to get new vertices, gol is to add labels to network plots\nget_vertices <- function(var_list){\n  tmp_list <- list()\n  for(i in 1:length(var_list)){\n    tmp_list[[length(tmp_list)+1]] <- paste(var_list[i], \"--\", var_list[i], sep=\"\")\n    names(tmp_list)[i] <- as.character(i)\n    i <- i+1\n  }\n  return(tmp_list)\n}\n\n# exclusiv sfdc\nadjustHeaderOld <- function(data){\n  colnames(data) <- c(\"Opportunity Name\", \"Account Name\", \"Forecast Currency\", \"Forecast Amount1\", \"Forecast Currency USD\", \"Forecast Amount\", \"Forecast Status\", \"Close Date\", \"Account Owner\", \"Primary SE\", \"Solution Win\", \"Solution Win Comments\", \"Service Comments\", \"Manager Comments\", \"PreSales Speciality\", \"Speciality Engagement\", \"Products\", \"Won\", \"Closed\")\n  return(data)\n}\n\nadjustHeader <- function(data){\n  colnames(data) <- gsub(\"_\", \" \", colnames(data))\n  return(data)\n}\n\ndesignPlot <- function(plotVar){\n  plotVar <- plotVar + theme(title = element_text(face=\"bold\", size=24),\n                             axis.title.x = element_text(face=\"bold\", size=22, margin=margin(20,0,0,0)),\n                             axis.text.x  = element_text(vjust=0.5, size=18),\n                             axis.title.y = element_text(face=\"bold\", size=22, margin=margin(20,15,0,0)),\n                             axis.text.y  = element_text(vjust=0.5, size=18))\n  return(plotVar)\n}\n\norderDataframe <- function(df){\n  df <- df[order(df$Forecast_Amount_USD, decreasing = TRUE), ]\n  return(df)\n}\n\nformatDataframe <- function(df){\n  df$Forecast_Amount_USD <- format(df$Forecast_Amount_USD, big.mark = \".\", decimal.mark = \",\", nsmall = 0)\n  return(df)\n}",
    "created" : 1487866072011.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "454681822",
    "id" : "D7495953",
    "lastKnownWriteTime" : 1487866101,
    "last_content_update" : 1487866101477,
    "path" : "C:/Users/michas4/Desktop/Daten/DBs/R/graphr_dashboard/customFunctions.R",
    "project_path" : "customFunctions.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}